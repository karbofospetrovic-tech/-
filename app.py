import os
import tempfile
import subprocess
from aiogram import Bot, Dispatcher, types, executor
from googletrans import Translator
from gtts import gTTS
import whisper

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "–í–°–¢–ê–í–¨_–°–í–û–ô_TELEGRAM_–¢–û–ö–ï–ù"
translator = Translator()
model = whisper.load_model("small")  # –º–æ–∂–Ω–æ "tiny" –¥–ª—è —Å–ª–∞–±–æ–≥–æ –ü–ö

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def convert_ogg_to_wav(input_path: str) -> str:
    out_path = tempfile.mktemp(suffix=".wav")
    subprocess.run(
        ["ffmpeg", "-y", "-i", input_path, "-ar", "16000", "-ac", "1", out_path],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
        check=True
    )
    return out_path

def tts(text, lang):
    path = tempfile.mktemp(suffix=".mp3")
    gTTS(text=text, lang=lang).save(path)
    return path

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message_handler(content_types=["text"])
async def handle_text(msg: types.Message):
    text = msg.text.strip()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    src_lang = "ru" if all("–∞" <= c.lower() <= "—è" for c in text if c.isalpha()) else "de"
    dest_lang = "de" if src_lang == "ru" else "ru"
    translated = translator.translate(text, src=src_lang, dest=dest_lang).text
    await msg.reply(f"üî§ –ü–µ—Ä–µ–≤–æ–¥:\n{translated}")

    # –û–∑–≤—É—á–∫–∞
    voice_path = tts(translated, dest_lang)
    with open(voice_path, "rb") as f:
        await bot.send_audio(msg.chat.id, f, caption="üîä –û–∑–≤—É—á–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")
    os.remove(voice_path)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message_handler(content_types=["voice"])
async def handle_voice(msg: types.Message):
    await msg.reply("üéß –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")
    file_info = await bot.get_file(msg.voice.file_id)
    ogg_path = tempfile.mktemp(suffix=".ogg")
    await bot.download_file(file_info.file_path, ogg_path)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ogg -> wav
    wav_path = convert_ogg_to_wav(ogg_path)
    # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Whisper
    result = model.transcribe(wav_path, fp16=False, language=None)
    text = result["text"].strip()
    await msg.reply(f"üó£ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n{text}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    src_lang = "ru" if any("–∞" <= c.lower() <= "—è" for c in text if c.isalpha()) else "de"
    dest_lang = "de" if src_lang == "ru" else "ru"

    # –ü–µ—Ä–µ–≤–æ–¥
    translated = translator.translate(text, src=src_lang, dest=dest_lang).text
    await msg.reply(f"üî§ –ü–µ—Ä–µ–≤–æ–¥:\n{translated}")

    # –û–∑–≤—É—á–∫–∞
    voice_path = tts(translated, dest_lang)
    with open(voice_path, "rb") as f:
        await bot.send_audio(msg.chat.id, f, caption="üîä –û–∑–≤—É—á–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")

    os.remove(ogg_path)
    os.remove(wav_path)
    os.remove(voice_path)

if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)


