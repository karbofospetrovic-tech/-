import os
import logging
import tempfile
from flask import Flask
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from deep_translator import GoogleTranslator
import speech_recognition as sr
from gtts import gTTS
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Flask app –¥–ª—è Fly.io
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç –ë—Ä–∞—Ç–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
def translate_text(text, target_lang='ru'):
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫
        if any(char in '√§√∂√º√ü' for char in text.lower()):
            source_lang = 'de'  # –Ω–µ–º–µ—Ü–∫–∏–π
            target_lang = 'ru' if target_lang == 'ru' else 'de'
        else:
            source_lang = 'ru'  # —Ä—É—Å—Å–∫–∏–π
            target_lang = 'de' if target_lang == 'de' else 'ru'
        
        # –ü–µ—Ä–µ–≤–æ–¥
        translated = GoogleTranslator(source=source_lang, target=target_lang).translate(text)
        return translated
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}"

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
def text_to_speech(text, lang='ru'):
    try:
        tts = gTTS(text=text, lang=lang)
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as fp:
            tts.save(fp.name)
            return fp.name
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ TTS: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
def speech_to_text(audio_file):
    try:
        recognizer = sr.Recognizer()
        with sr.AudioFile(audio_file) as source:
            audio = recognizer.record(source)
            text = recognizer.recognize_google(audio, language='ru-RU')
            return text
    except sr.UnknownValueError:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        return f"–û—à–∏–±–∫–∞: {e}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    translated = translate_text(text)
    
    await update.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥:\n{translated}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = await update.message.voice.get_file()
        
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as ogg_file:
            await voice_file.download_to_drive(ogg_file.name)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ogg –≤ wav –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            with tempfile.NamedTemporaryFile(delete=False, suffix='.wav') as wav_file:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º pydub –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                from pydub import AudioSegment
                audio = AudioSegment.from_ogg(ogg_file.name)
                audio.export(wav_file.name, format="wav")
                
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
                recognized_text = speech_to_text(wav_file.name)
                
                if "–ù–µ —É–¥–∞–ª–æ—Å—å" in recognized_text or "–û—à–∏–±–∫–∞" in recognized_text:
                    await update.message.reply_text(f"‚ùå {recognized_text}")
                    return
                
                await update.message.reply_text(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {recognized_text}")
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
                translated = translate_text(recognized_text)
                await update.message.reply_text(f"üåç –ü–µ—Ä–µ–≤–æ–¥: {translated}")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–µ—á—å
                if any(char in '√§√∂√º√ü' for char in recognized_text.lower()):
                    # –ù–µ–º–µ—Ü–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π, –æ–∑–≤—É—á–∏–≤–∞–µ–º –ø–æ-—Ä—É—Å—Å–∫–∏
                    tts_file = text_to_speech(translated, 'ru')
                    tts_lang = 'ru'
                else:
                    # –†—É—Å—Å–∫–∏–π -> –Ω–µ–º–µ—Ü–∫–∏–π, –æ–∑–≤—É—á–∏–≤–∞–µ–º –ø–æ-–Ω–µ–º–µ—Ü–∫–∏
                    tts_file = text_to_speech(translated, 'de')
                    tts_lang = 'de'
                
                if tts_file:
                    await update.message.reply_voice(
                        voice=open(tts_file, 'rb'),
                        caption=f"üîä –û–∑–≤—É—á–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ({'—Ä—É—Å—Å–∫–∏–π' if tts_lang == 'ru' else '–Ω–µ–º–µ—Ü–∫–∏–π'})"
                    )
                    os.unlink(tts_file)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                os.unlink(ogg_file.name)
                os.unlink(wav_file.name)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ë—Ä–∞—Ç–∏–∫ - –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ üá©üá™‚áÑüá∑üá∫\n\n"
        "üìù *–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:* –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–∂—É –º–µ–∂–¥—É —Ä—É—Å—Å–∫–∏–º –∏ –Ω–µ–º–µ—Ü–∫–∏–º\n"
        "üé§ *–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:* —Ä–∞—Å–ø–æ–∑–Ω–∞—é, –ø–µ—Ä–µ–≤–æ–∂—É –∏ –æ–∑–≤—É—á–∏–≤–∞—é –ø–µ—Ä–µ–≤–æ–¥\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
        parse_mode='Markdown'
    )

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask –¥–ª—è Fly.io
    @app.route('/health')
    def health():
        return "OK"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask (–¥–ª—è Fly.io)
    if __name__ == '__main__':
        port = int(os.environ.get('PORT', 8080))
        app.run(host='0.0.0.0', port=port)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    token = "8083120011:AAHs2PDQSa1GmOHJ7RzfoXbIc3Q87174VYU"
    if token:
        bot_app = Application.builder().token(token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        bot_app.add_handler(MessageHandler(filters.VOICE, handle_voice))
        
        from telegram.ext import CommandHandler
        bot_app.add_handler(CommandHandler("start", start))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        def run_bot():
            logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
            bot_app.run_polling()
        
        bot_thread = threading.Thread(target=run_bot)
        bot_thread.daemon = True
        bot_thread.start()
        logger.info("–ë–æ—Ç –ë—Ä–∞—Ç–∏–∫ –∑–∞–ø—É—â–µ–Ω!")

if __name__ == '__main__':
    main()